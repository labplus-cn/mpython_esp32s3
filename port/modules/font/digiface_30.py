# Code generated by font-to-py.py.
# Font: digiface.ttf Char set:  .0123456789:
version = '0.26'

def height():
    return 30

def max_width():
    return 20

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x11\x00\x00\x00\x00\x7f\xe0\x00\xff\xf0\x00\xff\xfc\x00\x7f\xfe'\
b'\x00\x00\x1e\x00\x00\x1e\x00\x00\x1e\x00\x00\x1e\x00\x00\x1e\x00'\
b'\x00\x1e\x00\x00\x1e\x00\x00\x1e\x00\x07\xee\x00\x03\xfa\x00\x09'\
b'\xf8\x00\x0d\xe0\x00\x0e\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00'\
b'\x00\x0f\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x00\x00\x0f\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\xf0\xf0\xf0\xf0\xf0\xf0\x14\x00\x00\x00\x00\x0f'\
b'\xf8\x00\x1f\xfc\x00\x7f\xff\x80\xff\xff\x80\xf0\x07\x80\xf0\x07'\
b'\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80'\
b'\xf0\x03\x80\xe0\x00\x80\x80\x00\x00\x80\x00\x00\xe0\x01\x80\xf0'\
b'\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07'\
b'\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\x4f\xff\x80\x1f\xff\x00'\
b'\x1f\xfc\x00\x0f\xf8\x00\x14\x00\x00\x00\x00\x10\x00\x00\x30\x00'\
b'\x00\x70\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00'\
b'\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\x70'\
b'\x00\x00\x10\x00\x00\x00\x00\x00\x30\x00\x00\xf0\x00\x00\xf0\x00'\
b'\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00'\
b'\xf0\x00\x00\xf0\x00\x00\x70\x00\x00\x30\x00\x00\x10\x00\x00\x00'\
b'\x00\x00\x14\x00\x00\x00\x00\x0f\xf8\x00\x1f\xfc\x00\x3f\xff\x00'\
b'\x7f\xff\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00'\
b'\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x0f\xff\x80\x3f\xfe'\
b'\x80\x7f\xff\x00\xdf\xfc\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00'\
b'\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0'\
b'\x00\x00\xff\xfc\x00\x7f\xfe\x00\x1f\xff\x00\x0f\xff\x80\x14\x00'\
b'\x00\x00\x00\xff\xf0\x00\x7f\xf8\x00\x3f\xfe\x00\x1f\xff\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f'\
b'\x00\x00\x0f\x00\x00\x0f\x00\x1f\xff\x00\x7f\xfd\x00\x7f\xfe\x00'\
b'\x3f\xfb\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x1f\xff'\
b'\x00\x3f\xfe\x00\x7f\xf8\x00\xff\xf0\x00\x14\x00\x00\x00\x00\x80'\
b'\x00\x80\xc0\x01\x80\xe0\x03\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07'\
b'\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80'\
b'\xf0\x07\x80\xef\xff\x80\xbf\xfe\x80\x7f\xff\x00\x1f\xfd\x80\x00'\
b'\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07'\
b'\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x03\x80\x00\x01\x80'\
b'\x00\x00\x80\x00\x00\x00\x14\x00\x00\x00\x00\x0f\xff\x00\x1f\xfe'\
b'\x00\x7f\xfc\x00\xff\xf8\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00'\
b'\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xef'\
b'\xfc\x00\xbf\xfe\x00\x7f\xff\x00\x1f\xfd\x80\x00\x07\x80\x00\x07'\
b'\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80'\
b'\x00\x07\x80\x00\x07\x80\x1f\xff\x80\x3f\xff\x00\x7f\xfc\x00\xff'\
b'\xf8\x00\x14\x00\x00\x00\x00\x0f\xff\x00\x1f\xfe\x00\x7f\xfc\x00'\
b'\xff\xf8\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0'\
b'\x00\x00\xf0\x00\x00\xf0\x00\x00\xf0\x00\x00\xef\xfc\x00\xbf\xfe'\
b'\x00\x7f\xff\x00\xdf\xfd\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80'\
b'\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0'\
b'\x07\x80\x6f\xff\x80\x1f\xff\x00\x1f\xfc\x00\x0f\xf8\x00\x14\x00'\
b'\x00\x00\x00\xff\xfd\x00\x7f\xfb\x00\x3f\xf7\x00\x1f\xef\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f'\
b'\x00\x00\x0f\x00\x00\x0f\x00\x00\x07\x00\x00\x01\x00\x00\x00\x00'\
b'\x00\x03\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00'\
b'\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x0f\x00\x00\x07'\
b'\x00\x00\x03\x00\x00\x01\x00\x00\x00\x00\x14\x00\x00\x00\x00\x0f'\
b'\xf8\x00\x1f\xfc\x00\x7f\xff\x80\xff\xff\x80\xf0\x07\x80\xf0\x07'\
b'\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80'\
b'\xf0\x03\x80\xef\xfc\x80\xbf\xff\x00\xff\xfe\x00\xff\xfd\x80\xf0'\
b'\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07'\
b'\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\x4f\xff\x80\x1f\xff\x00'\
b'\x1f\xfc\x00\x0f\xf8\x00\x14\x00\x00\x00\x00\x0f\xf8\x00\x1f\xfc'\
b'\x00\x7f\xff\x00\xff\xff\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80'\
b'\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xf0\x07\x80\xef'\
b'\xff\x80\xbf\xfe\x80\x7f\xff\x00\x1f\xfd\x80\x00\x03\x80\x00\x07'\
b'\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80\x00\x07\x80'\
b'\x00\x07\x80\x00\x07\x80\x0f\xff\x80\x1f\xff\x00\x3f\xfc\x00\x7f'\
b'\xf8\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0'\
b'\xf0\xf0\xf0\xf0\xf0\x00\x00\x00\x00\x00\x00\x00\xf0\xf0\xf0\xf0'\
b'\xf0\xf0'

_index =\
b'\x00\x00\x5c\x00\x5c\x00\x9a\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x9a\x00\xba\x00'\
b'\x00\x00\x5c\x00\xba\x00\x16\x01\x16\x01\x72\x01\x72\x01\xce\x01'\
b'\xce\x01\x2a\x02\x2a\x02\x86\x02\x86\x02\xe2\x02\xe2\x02\x3e\x03'\
b'\x3e\x03\x9a\x03\x9a\x03\xf6\x03\xf6\x03\x52\x04\x52\x04\x72\x04'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00'

_mvfont = memoryview(_font)

def get_ch(ch):
    ordch = ord(ch)
    ordch = ordch + 1 if ordch >= 32 and ordch <= 63 else 63
    idx_offs = 4 * (ordch - 32)
    offset = int.from_bytes(_index[idx_offs : idx_offs + 2], 'little')
    next_offs = int.from_bytes(_index[idx_offs + 2 : idx_offs + 4], 'little')
    width = int.from_bytes(_font[offset:offset + 2], 'little')
    return _mvfont[offset + 2:next_offs], 30, width
 
