# Code generated by font-to-py.py.
# Font: digi_italic.ttf Char set:  .0123456789:
version = '0.26'

def height():
    return 30

def max_width():
    return 23

def hmap():
    return True

def reverse():
    return False

def monospaced():
    return False

def min_ch():
    return 32

def max_ch():
    return 63

_font =\
b'\x12\x00\x0f\xf8\x00\x1f\xfc\x00\x3f\xfc\x00\x1f\xfb\x00\x00\x07'\
b'\x00\x00\x07\x00\x00\x07\x00\x00\x07\x00\x00\x0e\x00\x00\x0e\x00'\
b'\x00\x0e\x00\x00\x0e\x00\x0f\xee\x00\x17\xf4\x00\x13\xf8\x00\x1b'\
b'\xc0\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x70\x00\x00\x70\x00\x00'\
b'\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\x0c\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'\
b'\x00\x00\x00\x00\x70\x70\x70\xf0\xe0\xe0\x15\x00\x00\x7f\xe0\x00'\
b'\xff\xe0\x02\xff\xf0\x06\xff\xf8\x0e\x00\x38\x0e\x00\x78\x0e\x00'\
b'\x78\x0e\x00\x70\x1c\x00\x70\x1c\x00\x70\x1c\x00\x70\x1c\x00\xe0'\
b'\x18\x00\xe0\x30\x00\x20\x00\x00\x00\x00\x00\x20\x30\x00\xc0\x78'\
b'\x01\xc0\x70\x01\xc0\x70\x01\xc0\x70\x03\xc0\x70\x03\x80\xe0\x03'\
b'\x80\xe0\x03\x80\xe0\x03\x80\xe0\x07\x00\xdf\xfb\x00\x3f\xfe\x00'\
b'\x3f\xf8\x00\x1f\xf0\x00\x15\x00\x01\x00\x00\x01\x00\x00\x03\x00'\
b'\x00\x07\x00\x00\x07\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00'\
b'\x0e\x00\x00\x1e\x00\x00\x1c\x00\x00\x1c\x00\x00\x1c\x00\x00\x0c'\
b'\x00\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x38\x00\x00\x78\x00'\
b'\x00\x70\x00\x00\x70\x00\x00\x70\x00\x00\x70\x00\x00\xe0\x00\x00'\
b'\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\x60\x00\x00\x40\x00\x00\x00'\
b'\x00\x00\x16\x00\x00\x7f\xe0\x00\xff\xe0\x03\xff\xe8\x07\xff\xd8'\
b'\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00'\
b'\x00\x70\x00\x00\x70\x00\x00\x70\x03\xff\x70\x0f\xff\xf0\x1f\xff'\
b'\xc0\x07\xff\x00\x70\x00\x00\x78\x00\x00\x70\x00\x00\x70\x00\x00'\
b'\x70\x00\x00\xf0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0'\
b'\x00\x00\xdf\xfc\x00\xbf\xfc\x00\x3f\xfe\x00\x1f\xff\x00\x16\x00'\
b'\x01\xff\xe0\x01\xff\xf0\x00\xff\xf8\x00\x7f\xf8\x00\x00\x38\x00'\
b'\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x78\x00\x00\x70\x00\x00'\
b'\x70\x00\x00\x70\x03\xff\xf0\x07\xff\xf0\x0f\xff\xc0\x03\xff\x00'\
b'\x00\x00\x60\x00\x00\xe0\x00\x01\xc0\x00\x01\xc0\x00\x01\xc0\x00'\
b'\x01\xc0\x00\x03\xc0\x00\x03\x80\x00\x03\x80\x00\x03\x80\x0f\xfb'\
b'\x00\x1f\xfe\x00\x3f\xfc\x00\x7f\xf8\x00\x15\x00\x10\x00\x10\x10'\
b'\x00\x10\x18\x00\x30\x3c\x00\x70\x38\x00\xe0\x38\x00\xe0\x38\x00'\
b'\xe0\x38\x00\xe0\x70\x01\xe0\x70\x01\xc0\x70\x01\xc0\x70\x01\xc0'\
b'\x63\xff\xc0\xcf\xff\xc0\x3f\xff\xc0\x1f\xff\x00\x00\x01\x80\x00'\
b'\x07\x80\x00\x07\x00\x00\x07\x00\x00\x07\x00\x00\x07\x00\x00\x0f'\
b'\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0c\x00'\
b'\x00\x04\x00\x00\x00\x00\x17\x00\x00\x3f\xfc\x00\x7f\xf8\x01\x7f'\
b'\xf0\x03\x7f\xe0\x07\x00\x00\x07\x00\x00\x07\x00\x00\x07\x00\x00'\
b'\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0c\x7f\xe0\x19'\
b'\xff\xf8\x07\xff\xf8\x03\xff\xe0\x00\x00\x30\x00\x00\x70\x00\x00'\
b'\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x00\xe0\x00\x01\xc0'\
b'\x00\x01\xc0\x00\x01\xc0\x0f\xfd\x80\x3f\xff\x00\x7f\xfc\x00\xff'\
b'\xf8\x00\x16\x00\x00\x7f\xf8\x00\xff\xf0\x02\xff\xe0\x06\xff\xc0'\
b'\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x1c\x00\x00\x1c'\
b'\x00\x00\x1c\x00\x00\x1c\x00\x00\x18\xff\xc0\x33\xff\xf0\x0f\xff'\
b'\xf0\x07\xff\xc0\x30\x00\x60\x78\x00\xe0\x70\x01\xc0\x70\x01\xc0'\
b'\x70\x01\xc0\x70\x01\xc0\xe0\x01\xc0\xe0\x03\x80\xe0\x03\x80\xe0'\
b'\x03\x80\xdf\xfb\x00\x3f\xfe\x00\x3f\xf8\x00\x1f\xf0\x00\x15\x00'\
b'\x7f\xfe\x00\x7f\xfc\x80\x3f\xf9\x00\x1f\xf3\x00\x00\x07\x00\x00'\
b'\x07\x00\x00\x07\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e\x00\x00\x0e'\
b'\x00\x00\x1e\x00\x00\x1c\x00\x00\x04\x00\x00\x00\x00\x00\x04\x00'\
b'\x00\x08\x00\x00\x38\x00\x00\x38\x00\x00\x38\x00\x00\x78\x00\x00'\
b'\x70\x00\x00\x70\x00\x00\x70\x00\x00\x70\x00\x00\xe0\x00\x00\xe0'\
b'\x00\x00\x60\x00\x00\x20\x00\x00\x00\x00\x15\x00\x00\x7f\xe0\x00'\
b'\xff\xe0\x02\xff\xf0\x06\xff\xf8\x0e\x00\x38\x0e\x00\x38\x0e\x00'\
b'\x78\x0e\x00\x70\x1c\x00\x70\x1c\x00\x70\x1c\x00\x70\x1c\x00\xe0'\
b'\x18\xff\xe0\x33\xff\xf0\x0f\xff\xf0\x07\xff\xe0\x30\x00\xc0\x78'\
b'\x01\xc0\x70\x01\xc0\x70\x01\xc0\x70\x03\xc0\x70\x03\x80\xe0\x03'\
b'\x80\xe0\x03\x80\xe0\x03\x80\xe0\x07\x00\xdf\xfb\x00\x3f\xfe\x00'\
b'\x3f\xf8\x00\x1f\xf0\x00\x16\x00\x00\x7f\xe0\x00\xff\xe0\x02\xff'\
b'\xf0\x06\xff\xf8\x0e\x00\x38\x0e\x00\x38\x0e\x00\x78\x0e\x00\x70'\
b'\x1c\x00\x70\x1c\x00\x70\x1c\x00\x70\x1c\x00\xe0\x1c\x7f\xe0\x31'\
b'\xff\xf8\x0f\xff\xf8\x03\xff\xe0\x00\x00\x40\x00\x01\xc0\x00\x01'\
b'\xc0\x00\x01\xc0\x00\x03\xc0\x00\x03\x80\x00\x03\x80\x00\x03\x80'\
b'\x00\x03\x80\x00\x07\x00\x1f\xfb\x00\x3f\xfe\x00\x7f\xf8\x00\xff'\
b'\xf0\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x0e'\
b'\x0e\x0e\x1c\x1c\x00\x00\x00\x00\x00\x00\x00\x78\x70\x70\x70\x70'\
b'\xf0\xe0'

_index =\
b'\x00\x00\x5c\x00\x5c\x00\x9a\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x9a\x00\xba\x00'\
b'\x00\x00\x5c\x00\xba\x00\x16\x01\x16\x01\x72\x01\x72\x01\xce\x01'\
b'\xce\x01\x2a\x02\x2a\x02\x86\x02\x86\x02\xe2\x02\xe2\x02\x3e\x03'\
b'\x3e\x03\x9a\x03\x9a\x03\xf6\x03\xf6\x03\x52\x04\x52\x04\x72\x04'\
b'\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00\x00\x00\x5c\x00'\
b'\x00\x00\x5c\x00'

_mvfont = memoryview(_font)

def get_ch(ch):
    ordch = ord(ch)
    ordch = ordch + 1 if ordch >= 32 and ordch <= 63 else 63
    idx_offs = 4 * (ordch - 32)
    offset = int.from_bytes(_index[idx_offs : idx_offs + 2], 'little')
    next_offs = int.from_bytes(_index[idx_offs + 2 : idx_offs + 4], 'little')
    width = int.from_bytes(_font[offset:offset + 2], 'little')
    return _mvfont[offset + 2:next_offs], 30, width
 
